{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":["file:///D:/Practice/FormLingo/Next/lib/xmlProcessor.js"],"sourcesContent":["const XLSX = require('xlsx');\r\n\r\n/**\r\n * Extract text content from XML string and return as array of key-value pairs\r\n * @param {string} xmlString - The XML string to process\r\n * @returns {Array} Array of objects with {key, value} pairs\r\n */\r\nfunction extractTextFromXML(xmlString) {\r\n  const extractedTexts = [];\r\n  let bracesCount = 0;\r\n  let tempStr = \"\";\r\n  \r\n  for (let i = 0; i < xmlString.length; i++) {\r\n    if (xmlString[i] === \"<\") {\r\n      bracesCount++;\r\n    }\r\n    if (xmlString[i] === \">\") {\r\n      bracesCount--;\r\n    }\r\n    \r\n    if (bracesCount === 0) {\r\n      if (tempStr.length > 0) {\r\n        if (xmlString[i] === \"\\n\" || xmlString[i] === \"\\r\" || xmlString[i] === \"\\t\") {\r\n          tempStr = tempStr.trim();\r\n          tempStr = tempStr.replace(/amp;/g, \"\");\r\n          tempStr = tempStr.replace(/:/g, \"\");\r\n          \r\n          if (tempStr.length > 0) {\r\n            extractedTexts.push({\r\n              key: tempStr,\r\n              value: \"\" // Empty value for user to fill in Excel\r\n            });\r\n          }\r\n          tempStr = \"\";\r\n          continue;\r\n        }\r\n      }\r\n      if (xmlString[i] !== \">\") {\r\n        tempStr += xmlString[i];\r\n      }\r\n      continue;\r\n    }\r\n  }\r\n  console.log(extractedTexts);\r\n  return extractedTexts;\r\n}\r\n\r\n/**\r\n * Translate XML string using translation mappings\r\n * @param {string} xmlString - The original XML string\r\n * @param {Object} translations - Object with key-value translation mappings\r\n * @returns {string} Translated XML string\r\n */\r\nfunction translateXML(xmlString, translations) {\r\n  let newStr = \"\";\r\n  let bracesCount = 0;\r\n  let tempStr = \"\";\r\n  \r\n  for (let i = 0; i < xmlString.length; i++) {\r\n    if (xmlString[i] === \"<\") {\r\n      bracesCount++;\r\n    }\r\n    if (xmlString[i] === \">\") {\r\n      bracesCount--;\r\n      newStr += xmlString[i];\r\n    }\r\n    \r\n    if (bracesCount === 0) {\r\n      if (tempStr.length > 0) {\r\n        if (xmlString[i] === \"\\n\" || xmlString[i] === \"\\r\" || xmlString[i] === \"\\t\") {\r\n          tempStr = tempStr.trim();\r\n          tempStr = tempStr.replace(/amp;/g, \"\");\r\n          tempStr = tempStr.replace(/:/g, \"\");\r\n          \r\n          const translatedString = translations[tempStr];\r\n          \r\n          if (translatedString == null || translatedString === \"\") {\r\n            newStr += tempStr;\r\n          } else {\r\n            newStr += translatedString;\r\n          }\r\n          tempStr = \"\";\r\n          newStr += xmlString[i];\r\n          continue;\r\n        }\r\n      }\r\n      if (xmlString[i] !== \">\") {\r\n        tempStr += xmlString[i];\r\n      }\r\n      continue;\r\n    }\r\n    newStr += xmlString[i];\r\n  }\r\n  \r\n  return newStr;\r\n}\r\n\r\n/**\r\n * Create Excel file from extracted text data\r\n * @param {Array} extractedTexts - Array of {key, value} objects\r\n * @returns {Buffer} Excel file buffer\r\n */\r\nfunction createExcelFile(extractedTexts) {\r\n  // Prepare data for Excel\r\n  const excelData = [\r\n    [\"Original Text\", \"Translated Text\"], // Header row\r\n    ...extractedTexts.map(item => [item.key, item.value])\r\n  ];\r\n  \r\n  // Create workbook and worksheet\r\n  const wb = XLSX.utils.book_new();\r\n  const ws = XLSX.utils.aoa_to_sheet(excelData);\r\n  \r\n  // Set column widths\r\n  ws['!cols'] = [\r\n    { width: 50 }, // Original Text column\r\n    { width: 50 }  // Translated Text column\r\n  ];\r\n  \r\n  // Add worksheet to workbook\r\n  XLSX.utils.book_append_sheet(wb, ws, \"Translations\");\r\n  \r\n  // Convert to buffer\r\n  return XLSX.write(wb, { type: 'buffer', bookType: 'xlsx' });\r\n}\r\n\r\n/**\r\n * Read Excel file and extract translation mappings\r\n * @param {Buffer} excelBuffer - Excel file buffer\r\n * @returns {Object} Translation mappings object\r\n */\r\nfunction readExcelTranslations(excelBuffer) {\r\n  try {\r\n    const workbook = XLSX.read(excelBuffer, { type: 'buffer' });\r\n    const sheetName = workbook.SheetNames[0];\r\n    const worksheet = workbook.Sheets[sheetName];\r\n    const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\r\n    \r\n    const translations = {};\r\n    \r\n    // Skip header row (index 0) and process data rows\r\n    for (let i = 1; i < data.length; i++) {\r\n      const row = data[i];\r\n      if (row[0] && row[1]) { // Both key and value exist\r\n        let key = row[0].toString().trim();\r\n        key = key.replace(/amp;/g, \"\");\r\n        key = key.replace(/:/g, \"\");\r\n        translations[key] = row[1].toString();\r\n      }\r\n    }\r\n    \r\n    return translations;\r\n  } catch (error) {\r\n    console.error(\"Error reading Excel file:\", error);\r\n    throw new Error(\"Failed to read Excel file\");\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  extractTextFromXML,\r\n  translateXML,\r\n  createExcelFile,\r\n  readExcelTranslations\r\n};\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 206, "column": 0}, "map": {"version":3,"sources":["file:///D:/Practice/FormLingo/Next/app/api/translate/route.js"],"sourcesContent":["import { NextResponse } from 'next/server'\r\nconst { translateXML, readExcelTranslations } = require('../../../lib/xmlProcessor')\r\n\r\nexport async function POST(request) {\r\n  try {\r\n    const formData = await request.formData()\r\n    const xmlString = formData.get('xmlString')\r\n    const excelFile = formData.get('excelFile')\r\n    \r\n    if (!xmlString) {\r\n      return NextResponse.json(\r\n        { error: 'XML string is required' },\r\n        { status: 400 }\r\n      )\r\n    }\r\n    \r\n    if (!excelFile) {\r\n      return NextResponse.json(\r\n        { error: 'Excel file is required' },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    // Convert Excel file to buffer\r\n    const excelBuffer = Buffer.from(await excelFile.arrayBuffer())\r\n    \r\n    // Read translations from Excel file\r\n    const translations = readExcelTranslations(excelBuffer)\r\n    \r\n    if (Object.keys(translations).length === 0) {\r\n      return NextResponse.json(\r\n        { error: 'No valid translations found in Excel file' },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    // Translate the XML string\r\n    const translatedXml = translateXML(xmlString, translations)\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      translatedXml: translatedXml,\r\n      message: 'Translation completed successfully',\r\n      translationsCount: Object.keys(translations).length\r\n    })\r\n  } catch (error) {\r\n    console.error('Error in translate API:', error)\r\n    return NextResponse.json(\r\n      { error: 'Internal server error: ' + error.message },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;AACA,MAAM,EAAE,YAAY,EAAE,qBAAqB,EAAE;AAEtC,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,MAAM,WAAW,MAAM,QAAQ,QAAQ;QACvC,MAAM,YAAY,SAAS,GAAG,CAAC;QAC/B,MAAM,YAAY,SAAS,GAAG,CAAC;QAE/B,IAAI,CAAC,WAAW;YACd,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyB,GAClC;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,CAAC,WAAW;YACd,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyB,GAClC;gBAAE,QAAQ;YAAI;QAElB;QAEA,+BAA+B;QAC/B,MAAM,cAAc,OAAO,IAAI,CAAC,MAAM,UAAU,WAAW;QAE3D,oCAAoC;QACpC,MAAM,eAAe,sBAAsB;QAE3C,IAAI,OAAO,IAAI,CAAC,cAAc,MAAM,KAAK,GAAG;YAC1C,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA4C,GACrD;gBAAE,QAAQ;YAAI;QAElB;QAEA,2BAA2B;QAC3B,MAAM,gBAAgB,aAAa,WAAW;QAE9C,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,eAAe;YACf,SAAS;YACT,mBAAmB,OAAO,IAAI,CAAC,cAAc,MAAM;QACrD;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO,4BAA4B,MAAM,OAAO;QAAC,GACnD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}